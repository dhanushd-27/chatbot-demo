import { apiRequest, type ApiResponse } from './api';
import { getCurrentSessionId, setCurrentSessionId, generateSessionId } from './sessionService';

// Interface for session init request (matching backend API)
export interface SessionInitRequest {
  newSessionId: string;
  previousSessionId?: string;
}

// Interface for session init response (matching backend API)
export interface SessionInitResponse {
  message: string;
  archivedTurns: number;
  currentSessionId: string;
  previousSessionId: string;
}

/**
 * Initializes a new session and archives the current one.
 * - previousSessionId: read from localStorage key 'chatbot_current_session_id'
 * - newSessionId: generated by the frontend and stored back to localStorage under the same key
 */
export const sessionInit = async (): Promise<ApiResponse<SessionInitResponse>> => {
  // Read previous from localStorage (current becomes previous)
  const previousSessionId = getCurrentSessionId() || undefined;

  // Create and persist the new session id
  const newSessionId = generateSessionId();
  setCurrentSessionId(newSessionId);

  console.log('üÜï Initializing session with:', {
    newSessionId,
    previousSessionId: previousSessionId || 'none'
  });

  const requestBody: SessionInitRequest = {
    newSessionId,
    previousSessionId,
  };

  console.log('üì§ Session init request body:', requestBody);

  try {
    const response = await apiRequest<SessionInitResponse>('/session-init', {
      method: 'POST',
      body: JSON.stringify(requestBody),
    });

    if (response.success) {
      console.log('‚úÖ Session initialized successfully:', response.data);
    } else {
      console.error('‚ùå Session init failed:', response.error);
    }

    return response;
  } catch (error) {
    console.error('‚ùå Session init service error:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Failed to initialize session',
    };
  }
};
